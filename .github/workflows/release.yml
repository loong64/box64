name: build

on:
  workflow_dispatch:
  schedule:
    - cron: '0 20 * * *'

env:
  app_name: box64
  app_repo: ptitSeb/box64
  
jobs:
  check-binaries:
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.get-version.outputs.app_version }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Get Version
        id: get-version
        run: |
          app_version=$(curl -s "https://api.github.com/repos/${{ env.app_repo }}/releases/latest" | jq -r .tag_name)
          if [ -z "${app_version}" ] || [ "${app_version}" == "null" ]; then
            echo "Failed to get version"
            exit 1
          fi
          
          echo "app_version=${app_version}" >> $GITHUB_ENV
          echo "app_version=${app_version}" >> $GITHUB_OUTPUT
          echo ""
          echo "========== Build Args =========="
          echo "app_version=${app_version}"

      - name: Check Release
        id: check-release
        run: |
          gh release view ${app_version} -R ${{ github.repository }} >/dev/null 2>&1 || echo "create=1" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Tag
        if : steps.check-release.outputs.create == '1'
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git add .
          git commit -m "Release ${app_version}" || true
          git tag ${app_version}
          git push origin ${app_version}  || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if : steps.check-release.outputs.create == '1'
        run: |
          gh release create ${app_version} -R ${{ github.repository }} --title ${app_version} --notes "**Full Changelog**: [${app_version}](https://github.com/${{ env.app_repo }}/releases/tag/${app_version})"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-deb:
    runs-on: ubuntu-latest
    needs: check-binaries
    env:
      app_version: ${{ needs.check-binaries.outputs.app_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.app_version }}
      
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Check Release
        id: create-binaries
        run: |
          gh release view ${{ env.app_version }} -R ${{ github.repository }} | grep ${{ env.app_name }}_.*_loong64.deb >/dev/null 2>&1 || echo "create=1" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Binaries
        if : steps.create-binaries.outputs.create == '1'
        run: |
          docker buildx build --platform linux/loong64 --build-arg VERSION=${{ env.app_version }} -t ${{ env.app_name }}-debian-loong64:${{ env.app_version }} debian --load

      - name: Upgrade Release
        if : steps.create-binaries.outputs.create == '1'
        run: |
          docker run --rm -v $(pwd)/dist:/dist ${{ env.app_name }}-debian-loong64:${{ env.app_version }}
          ls -al dist
          gh release upload ${{ env.app_version }} -R ${{ github.repository }} dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-lib:
    runs-on: ubuntu-latest
    needs: check-binaries
    env:
      app_version: ${{ needs.check-binaries.outputs.app_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.app_version }}
      
      - uses: docker/setup-buildx-action@v3

      - name: Check Release
        id: create-binaries
        run: |
          gh release view ${{ env.app_version }} -R ${{ github.repository }} | grep ${{ env.app_name }}-bundle-x86-libs.tar.gz >/dev/null 2>&1 || echo "create=1" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Binaries
        if : steps.create-binaries.outputs.create == '1'
        run: |
          docker buildx build --build-arg VERSION=${{ env.app_version }} -t ${{ env.app_name }}-libs-loong64:${{ env.app_version }} libs --load

      - name: Upgrade Release
        if : steps.create-binaries.outputs.create == '1'
        run: |
          docker run --rm -v $(pwd)/dist:/dist ${{ env.app_name }}-libs-loong64:${{ env.app_version }}
          ls -al dist
          gh release upload ${{ env.app_version }} -R ${{ github.repository }} dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-cross:
    needs: check-binaries
    env:
      app_version: ${{ needs.check-binaries.outputs.app_version }}
    strategy:
      fail-fast: false
      matrix:
        platform: [LARCH64]
        type: [Release, Trace, StaticBuild, Box32]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - name: "Check release"
        id: create-binaries
        run: |
          gh release view ${{ env.app_version }} -R ${{ github.repository }} | grep ${{ env.app_name }}-.*.sha256 >/dev/null 2>&1 || echo "create=1" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          repository: ptitSeb/box64
          ref: ${{ env.app_version }}

      - name: "Environment preparation"
        if : steps.create-binaries.outputs.create == '1'
        run: |
          sudo apt-get update
          if [[ ${{ matrix.platform }} == 'LARCH64' ]]; then
            sudo mkdir /usr/local/larch
            wget -O- -q https://github.com/loongson/build-tools/releases/download/2023.08.08/CLFS-loongarch64-8.1-x86_64-cross-tools-gcc-glibc.tar.xz | sudo tar -C /usr/local/larch --strip-components=1 --xz -xf -
            sudo ln -sf /usr/local/larch/target /usr/loongarch64-linux-gnu
            sudo cp -r /usr/local/larch/loongarch64-unknown-linux-gnu/lib/* /usr/loongarch64-linux-gnu/lib64/
            for i in objdump objcopy strip; do
              sudo ln -sf /usr/local/larch/bin/loongarch64-unknown-linux-gnu-$i /usr/bin/loongarch64-linux-gnu-$i
            done
            echo '/usr/local/larch/bin/loongarch64-unknown-linux-gnu-gcc -L/usr/local/larch/loongarch64-unknown-linux-gnu "$@"' | sudo tee /usr/bin/loongarch64-linux-gnu-gcc
            echo '/usr/local/larch/bin/loongarch64-unknown-linux-gnu-g++ -L/usr/local/larch/loongarch64-unknown-linux-gnu "$@"' | sudo tee /usr/bin/loongarch64-linux-gnu-g++
            sudo chmod 755 /usr/bin/loongarch64-linux-gnu-{gcc,g++}

            echo BOX64_PLATFORM_MARCRO="-DLARCH64=ON" >> $GITHUB_ENV
            echo "BOX64_COMPILER=loongarch64-linux-gnu-gcc" >> $GITHUB_ENV
            sudo apt-get -y install git cmake make python3
          fi
          if [[ ${{ matrix.type }} == 'Release' ]]; then
            echo BOX64_BUILD_TYPE=Release >> $GITHUB_ENV
            echo BOX64_HAVE_TRACE=0 >> $GITHUB_ENV
            echo BOX64_STATICBUILD=0 >> $GITHUB_ENV
            echo BOX64_BOX32=0 >> $GITHUB_ENV
          elif [[ ${{ matrix.type }} == 'StaticBuild' ]]; then
            echo BOX64_BUILD_TYPE=Release >> $GITHUB_ENV
            echo BOX64_HAVE_TRACE=0 >> $GITHUB_ENV
            echo BOX64_STATICBUILD=1 >> $GITHUB_ENV
            echo BOX64_BOX32=0 >> $GITHUB_ENV
          elif [[ ${{ matrix.type }} == 'Box32' ]]; then
            echo BOX64_BUILD_TYPE=Release >> $GITHUB_ENV
            echo BOX64_HAVE_TRACE=0 >> $GITHUB_ENV
            echo BOX64_STATICBUILD=0 >> $GITHUB_ENV
            echo BOX64_BOX32=1 >> $GITHUB_ENV
          else
            echo BOX64_BUILD_TYPE=RelWithDebInfo >> $GITHUB_ENV
            echo BOX64_HAVE_TRACE=1 >> $GITHUB_ENV
            echo BOX64_STATICBUILD=0 >> $GITHUB_ENV
            echo BOX64_BOX32=0 >> $GITHUB_ENV
          fi

      - name: "Display Build info"
        if : steps.create-binaries.outputs.create == '1'
        run: |
          echo "CMake Platform Macro: ${{ env.BOX64_PLATFORM_MARCRO }}"
          echo "CMake C Compiler: ${{ env.BOX64_COMPILER }}"
          echo "Build type: ${{ env.BOX64_BUILD_TYPE }}"
          echo "Trace Enabled: ${{ env.BOX64_HAVE_TRACE }}"
          echo "StaticBuild Enabled: ${{ env.BOX64_STATICBUILD }}"
          echo "Box32 Enabled: ${{ env.BOX64_BOX32 }}"

      - name: "Build Box64"
        if : steps.create-binaries.outputs.create == '1'
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_C_COMPILER=${{ env.BOX64_COMPILER }}\
                   -DTERMUX=${{ env.IS_TERMUX }}\
                   ${{ env.BOX64_PLATFORM_MARCRO }}\
                   -DCMAKE_BUILD_TYPE=${{ env.BOX64_BUILD_TYPE }}\
                   -DHAVE_TRACE=${{ env.BOX64_HAVE_TRACE }}\
                   -DSTATICBUILD=${{ env.BOX64_STATICBUILD }}\
                   -DBOX32=${{ env.BOX64_BOX32 }}\
                   -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON\
                   -DCI=${{ matrix.platform != 'ANDROID' }}
          make -j$(nproc) VERBOSE=1

      - name: "Test Box64"
        if : steps.create-binaries.outputs.create == '1'
        run: |
          if [[ ${{ matrix.platform }} != 'X64' ]]; then
            mkdir qemu9
            wget -O- -q https://archive.archlinux.org/packages/q/qemu-user-static/qemu-user-static-9.0.2-1-x86_64.pkg.tar.zst | tar -I zstd -C qemu9 -xf -
            sudo cp qemu9/usr/bin/* /usr/bin/
          fi

          cd build
          export CTEST_OPTIONS="-j$(nproc) --timeout 120 --output-on-failure --repeat until-pass:20"
          if [[ ${{ matrix.platform }} == 'LARCH64' ]]; then
            export INTERPRETER=qemu-loongarch64-static
            export QEMU_LD_PREFIX=/usr/loongarch64-linux-gnu/

            BOX64_DYNAREC_LA64NOEXT=1 ctest $CTEST_OPTIONS -E nocosim
            BOX64_DYNAREC=0 ctest $CTEST_OPTIONS -E nocosim

            BOX64_DYNAREC_TEST=1 BOX64_DYNAREC_LA64NOEXT=1 ctest $CTEST_OPTIONS -E nocosim
          elif [[ ${{matrix.type}} == 'Box32' ]]; then
            ctest $CTEST_OPTIONS
          else
            ctest -j$(nproc)
          fi

      - name: Upgrade Release
        if : steps.create-binaries.outputs.create == '1'
        run: |
          mkdir -p dist
          mv build/box64 dist/box64
          cd dist
          tar -czf box64-${{ matrix.platform }}-${{ matrix.type }}.tar.gz box64
          sha256sum box64-${{ matrix.platform }}-${{ matrix.type }}.tar.gz > box64-${{ matrix.platform }}-${{ matrix.type }}.sha256
          mv box64 box64-${{ matrix.platform }}-${{ matrix.type }}
          ls -al
          gh release upload ${{ env.app_version }} -R ${{ github.repository }} ./*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}